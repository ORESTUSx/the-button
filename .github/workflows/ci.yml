name: Pipeline CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          python manage.py test -v 2

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      IMAGE_LOCAL: the-button:${{ github.sha }}
      IMAGE_REMOTE: ${{ secrets.DOCKER_USERNAME }}/the-button
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image (load for tests)
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_LOCAL }}
          load: true

      - name: Test Docker image
        shell: bash
        run: |
          set -euo pipefail
          docker run --name test-container -d -p 8000:8000 ${{ env.IMAGE_LOCAL }}

          for i in {1..30}; do
            # follow redirects (-L), be quiet (-s), fail on HTTP errors (-f)
            if curl -fsSL http://127.0.0.1:8000/ping/ | grep -qi "pong"; then
              echo "OK: /ping/ responded"
              break
            fi
            # fallback: check root page
            if curl -fsSL http://127.0.0.1:8000/ | grep -qi "Ping"; then
              echo "OK: root responded"
              break
            fi
            echo "Retry $i – waiting 1 sec..."
            sleep 1
            if [ $i -eq 30 ]; then
              echo "Application test timed out — container logs:"
              docker logs test-container || true
              exit 1
            fi
          done

          docker rm -f test-container

      - name: Tag and push Docker image
        if: github.event_name != 'pull_request'
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag ${{ env.IMAGE_LOCAL }} ${{ env.IMAGE_REMOTE }}:${SHORT_SHA}
          docker tag ${{ env.IMAGE_LOCAL }} ${{ env.IMAGE_REMOTE }}:latest
          docker push ${{ env.IMAGE_REMOTE }}:${SHORT_SHA}
          docker push ${{ env.IMAGE_REMOTE }}:latest

